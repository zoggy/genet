<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set sts=2 sw=2: -->
<!--
 Modified by Maxence Guesdon <maxence.guesdon@inria.fr> to ship
 with Genet

 Author: Eric Cooper <ecc@cmu.edu>
 Copyright (C) 2007 Eric Cooper <ecc@cmu.edu>
 Copyright (C) 2007 Eric Norige <thelema314@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="genet" _name="Genet" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-genet</property>
    <property name="globs">*.gnt</property>
    <property name="block-comment-start">(*</property>
    <property name="block-comment-end">*)</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="codeblock" _name="Code block" map-to="def:doc-comment-element"/>
    <style id="base-n-integer" _name="Base-N Integer" map-to="def:base-n-integer"/>
    <style id="floating-point" _name="Floating Point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="def-keyword" _name="Definition Keyword" map-to="def:keyword"/>
    <style id="exp-keyword" _name="Expression Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="module" _name="Module Path" map-to="def:type"/>
    <style id="escape" _name="Escaped Character" map-to="def:special-char"/>
    <style id="boolean" _name="Boolean value" map-to="def:boolean"/>
    <style id="ident" _name="Identifier" map-to="def:identifier"/>
  </styles>

  <definitions>
    <define-regex id="cap-ident">\b[A-Z][A-Za-z0-9_']*</define-regex>
    <define-regex id="low-ident">\b[a-z][A-Za-z0-9_']*</define-regex>
    <define-regex id="char-esc">\\((\\|"|'|n|t|b|r)|[0-9]{3}|x[0-9a-fA-F]{2})</define-regex>
    <context id="escape-seq" style-ref="escape">
      <match>\%{char-esc}</match>
    </context>
    <!-- here's the main context -->
    <context id="genet">
      <include>
	<context id="comment" style-ref="comment">
	  <start>\(\*</start>
	  <end>\*\)</end>
	  <include>
	    <context ref="string"/>
	  </include>
	</context>
	<context id="decimal" style-ref="decimal">
	  <match>[-]?[0-9][0-9_]*[lLn]?</match>
	</context>
	<context id="hex-number" style-ref="base-n-integer">
	  <match>[-]?0[xX][0-9A-Fa-f][0-9A-Fa-f_]*[lL]?</match>
	</context>
	<context id="octal-number" style-ref="base-n-integer">
	  <match>[-]?0[oO][0-7][0-7_]*[lL]?</match>
	</context>
	<context id="binary-number" style-ref="base-n-integer">
	  <match>[-]?0[bB][01][01_]*[lL]?</match>
	</context>
	<context id="floating-point-number" style-ref="floating-point">
	  <match>[-]?[0-9][0-9_]*(\.[0-9_]*)?([Ee][+-]?[0-9][0-9_]*)?</match>
	</context>
	<context id="modpath" style-ref="module">
	  <!-- include final '.'?  At the moment, no.  -->
	  <match>\%{cap-ident}(\.\%{cap-ident})*(?=\.)</match>
	</context>
	<context id="string" style-ref="string">
	  <start>"</start>
	  <end>"</end>
	  <include>
	    <context ref="escape-seq"/>
	  </include>
	</context>
	<context id="character-constant" style-ref="string">
	  <match>('\%{char-esc}')|('[^\\']')</match>
	</context>
	<context id="boolean-constant" style-ref="boolean">
	  <keyword>true</keyword>
	  <keyword>false</keyword>
	</context>
	<context id="exp-keywords" style-ref="exp-keyword">
    <match>-&gt;|\.|:</match>
	</context>
	<!-- types, objects and modules -->
	<context id="def-keywords" style-ref="def-keyword">
  	  <keyword>and</keyword>
            <keyword>chain</keyword>
            <keyword>in</keyword>
            <keyword>operation</keyword>
            <keyword>out</keyword>
            <keyword>set</keyword>
	</context>
	<context id="types" style-ref="type">
	  <keyword>int</keyword>
	  <keyword>float</keyword>
	  <keyword>char</keyword>
	  <keyword>bool</keyword>
	  <!-- note: Some and None are highlighted as variants -->
	</context>
	<context id="ident" style-ref="ident">
 	  <match>\%{low-ident}</match>
	</context>
      </include>
    </context>
  </definitions>
</language>
